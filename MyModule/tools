MODDIR=${0%/*}
LOG_FILE="${MODDIR}/MagicNet.log"
mihomo_dir="${MODDIR}/mihomo/"
mihomo_config="${MODDIR}/mihomo/config.yaml"
mihomo="/system/bin/mihomo"
MODULE_PROP="$MODDIR/module.prop"
ENV_FILE="$MODDIR/env"

extract_sub_url() {
    # 精确提取 myclash 节点的 url
    url=$(grep -A 4 '"myclash":' "${mihomo_config}" | grep 'url:' | awk '{print $2}' | tr -d '"')
    echo "${url}"
}

set_sub_url() {
    new_url=$1
    if [ -z "$new_url" ]; then
        log Error "新 URL 不能为空"
        return 1
    fi
    # 使用 sed 在 myclash 节点范围内替换 url
    sed -i '/"myclash":/,/url:/s|url:.*|url: "'"$new_url"'"|' "${mihomo_config}"
    
    log INFO "已将订阅链接更新为: ${new_url}"
}

set_module_description(){
    local new_description="$1"
    sed -i "s/^description=.*/description=$(printf '%s' "${new_description//\//\\/}")/" "${MODULE_PROP}"
}

formatted_date() {
    date +"%Y-%m-%d %H:%M:%S.%3N"
}

normal="\033[0m" # No Color
orange="\033[1;38;5;208m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
blue="\033[1;34m"

log() {
    [ ! -f "${LOG_FILE}" ] && touch "${LOG_FILE}"

    case $1 in
        INFO) color="${blue}" ;;
        Error) color="${red}" ;;
        Warning) color="${yellow}" ;;
        *) color="${green}" ;;
    esac
    current_time=$(formatted_date)
    message="${current_time} [$1]: $2"
    if [ -t 1 ]; then
        echo -e "${color}${message}${normal}"
    else
        echo "${message}" >> "${LOG_FILE}" 2>&1
    fi
}

clean_old_logs() {
    latest_time=$(tail -n 1 "${MODDIR}/MagicNet.log" | awk '{print $1 " " $2}')
    [ -z "$latest_time" ] && return

    latest_timestamp=$(date -d "$latest_time" +%s 2>/dev/null)
    [ -z "$latest_timestamp" ] && return

    awk -v latest_timestamp="$latest_timestamp" '
    {
        log_time = $1 " " $2
        gsub(/[-:]/, " ", log_time)
        log_timestamp = mktime(log_time)
        if (latest_timestamp - log_timestamp <= 86400) {
            print $0
        }
    }' "${MODDIR}/MagicNet.log" > "${MODDIR}/MagicNet.log.tmp" && mv "${MODDIR}/MagicNet.log.tmp" "${MODDIR}/MagicNet.log"
}

create_tun() {
    mkdir -p /dev/net
    log INFO "创建/dev/net/目录"

    [ ! -L /dev/net/tun ] && ln -s /dev/tun /dev/net/tun
    log INFO "创建/dev/net/tun符号链接"
    
    if [ ! -c "/dev/net/tun" ]; then
        log Error "无法创建 /dev/net/tun，可能的原因："
        log Warning "系统不支持 TUN/TAP 驱动或内核不兼容"
        exit 1
    fi
    log INFO "/dev/net/tun 为字符设备，检查通过"
}

mihomo_prepare() {
    if ! [ -f "${mihomo_config}" ]; then
        log Error "配置文件 ${mihomo_config} 不存在"
        exit 1
    else
        log INFO "加载配置文件: ${mihomo_config}"
        
        # 循环提取URL并进行判断
        while true; do
            extracted_url=$(extract_sub_url)
            if [ "$extracted_url" != "订阅链接" ]; then
                log INFO "提取到的订阅链接: ${extracted_url}"
                break
            else   
                log INFO "mihomo等待一个订阅链接 间隔10秒"      
                set_module_description "正在等待一个订阅链接📝 请前往修改 $ENV_FILE 或者 $mihomo_config 读取到的URL:$extracted_url"

                set_sub_url $(grep "^url=" "$ENV_FILE" | cut -d'=' -f2)
                log INFO "尝试从备份恢复"   
            fi
            # 等你填订阅链接呢
            sleep 10
        done
    fi
    log INFO "备份链接"
    echo "url=$extracted_url" > $ENV_FILE
    
}

mihomo_run() {
    log INFO "启动 mihomo 内核..."
    mihomo_prepare

    if [ -x "${mihomo}" ]; then
        # 启动 mihomo 内核，并将日志记录到指定文件
        set_module_description "mihomo启动!🛡️[内核启动时间🕓]-$(date '+%Y-%m-%d %H:%M:%S') [mihomo]-$(${mihomo} -v) 请注意查看日志!"
        "${mihomo}" -d "${mihomo_dir}" -f "${mihomo_config}" >> "${LOG_FILE}" 2>&1
    else
        log Error "未找到或不可执行的 ${mihomo}"
        exit 1
    fi

}
